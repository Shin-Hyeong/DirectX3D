#include "00. Global.fx"

float4 LightAmbient; // 광원의 색상. 붉은 빛이면 표면에 붉은 계열이 띄게 됨
float4 MaterialAmbient; // 물체의 색상. 붉은 물체이면 빛이 흰색이여도 붉게 표현 됨. 물체가 얼마나 빛을 받을 지

// Vertex Shader
VertexOutput VS(VertexTextureNormal input)
{
	VertexOutput output;
    output.position = mul(input.position, World);
    output.position = mul(output.position, VP);

    output.uv = input.uv;
	// 가만히 있는 Normal 좌표는 알고 있지만 정점이 이동하게 되면 Normal값이 변경되기 때문에
	// World 변환 행렬을 곱해야함. 특히 방향에 의해 변화가 이루어짐
	// World을 float3x3으로 변환하면 동차좌표계가 제외된 행렬을 얻을 수 있음
	// - 정점 이동에 사용하는 좌표가 제거됨.
    output.normal = mul(input.normal, (float3x3) World);
	 
	return output;
}

Texture2D Texture0 : register(t0);

// Ambient (주변광 / 환경광)
// 수 많은 반사를 거쳐서 광원이 불분명한 빛
// 일정한 밝기와 색으로 표현됨.

float4 PS(VertexOutput input) : SV_TARGET
{
    float4 color = LightAmbient * MaterialAmbient;
	
    return Texture0.Sample(LinearSampler, input.uv) * color;
}


// 어떤 Shader를 사용할지 선택할 수 있음
// - technique : 렌더링 기법을 의미하며, 하나 이상의 pass를 포함하는 상위 블록
// - pass : technique 안에 여러 개 존재할 수 있는 하위 실행 단위, 실제로 셰이더 설정, 렌더 상태, 텍스처 등 한 번의 드로우 호출 시 적용될 모든 파이프라인 상태를 정의
technique11 T0
{
	// VS와 PS를 묶음
	PASS_VP(P0, VS, PS)

	pass P1
	{
		// 와이어 프레임 설정
        SetRasterizerState(FillModeWireFrame);
		// vertexShader를 5.0버전을 사용하고 VS()함수 사용
		SetVertexShader(CompileShader(vs_5_0, VS()));
		// pixelShader를 5.0버전을 사용하고 PS2()함수 사용
		SetPixelShader(CompileShader(ps_5_0, PS()));
	}
};
