#include "pch.h"
#include "01. TriangleDemo.h"

void TriangleDemo::Init()
{
	// 사용할 Shader 이름선택하고 Shader를 생성
	_shader = make_shared<Shader>(L"01. Triangle.fx");

	{
		_vertices.resize(3);

		// 정점 위치
		_vertices[0].position = Vec3{-0.5f, -0.25f, 0.f};
		_vertices[1].position = Vec3{0.f, 0.5f, 0.f};
		_vertices[2].position = Vec3{0.5f, -0.25f, 0.f};
	}

	// vertexBuffer 생성
	_buffer = make_shared<VertexBuffer>();
	_buffer->Create(_vertices);
}

void TriangleDemo::Update()
{

}

void TriangleDemo::Render()
{
	uint32 stride = _buffer->GetStride();
	uint32 offset = _buffer->GetOffset();

	// VertexBuffer을 Pipeline(DeviceContext)에 연결
	DC->IASetVertexBuffers(0, 1, _buffer->GetComPtr().GetAddressOf(), &stride, &offset);

	// 원하는 정점의 수만큼 원하는 technique, pass을 적용
	_shader->Draw(1, 0, _buffer->GetCount());
}
